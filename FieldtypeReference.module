<?php

/**
 * ProcessWire Fieldtype, that references a value of a remote field.
 *
 * @author Benjamin Milde
 *
 * ProcessWire 2.x 
 * Copyright (C) 2015 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class FieldtypeReference extends Fieldtype {

	public static function getModuleInfo() {
		return array(
			'title' => 'Reference',
			'version' => "0.0.1",
			'summary' => 'Shows the value of a field, that lives in a related page of the current.',
			'author' => "Benjamin Milde",
   		'autoload' => false,
    	'singular' => false,
    	'installs' => "InputfieldReference"
			);
	}

	public function init() {
		$this->set("findPagesCode", "");
		parent::init();
	}

	/**
	 * Return the fields required to configure an instance of FieldtypeReference
	 *
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);

		$this->parseTemplateFieldLinks($field);

		$input = $this->modules->get('InputfieldTextarea'); 
		$input->attr('name', 'findPagesCode'); 
		$input->label = $this->_('PHP code to find the related page'); 
		$input->attr('value', $field->findPagesCode); 
		$input->attr('rows', 4); 
		$input->description = $this->_('To find the page, which holds the field you want to point to, enter a PHP code snippet below. This statement has access to the $page and $pages API variables, where $page refers to the page being edited. The snippet should return either a Page or NULL.'); // Description for Custom PHP to find selectable pages
		$input->notes = $this->_('return $page->parent->parent->children("name=locations")->first();'); // Example of Custom PHP code to find selectable pages

		$inputfields->add($input); 

		$input = $this->wire('modules')->get('InputfieldTextarea'); 
		$input->attr('name', 'fieldsPerTemplate');
		$input->attr('value', $field->fieldsPerTemplate); 
		$input->label = $this->_('Template / Field Pairing');
		$input->description = $this->_('Enter one or more templates of the selected pages and the fields, which should be retrieved from them. Put each template and the corresponding field in an own line.'); // Description
		$input->notes = $this->_('template=field');

		$inputfields->add($input);
		
		return $inputfields; 
	}

	/**
	 * Fork from InputfieldPage
	 *
	 */
	public function getSelectedPage(Page $page, Field $field) {

		$statusUnder = Page::statusTrash; 

		if(empty($field->findPagesCode)) return null;
		$pages = $this->wire('pages'); // so that it is locally scoped to the eval
		$p = eval($field->findPagesCode);

		if(!$p instanceof Page) return null;
		if($p->id === $page->id) return null;
		if($page->is("status>$statusUnder")) return null;

		return $p; 
	}

	/**
	 * Fork from InputfieldPage
	 *
	 */
	protected function getFieldByTemplate($template, Field $field){
		$a = $this->parseTemplateFieldLinks($field);
		if($template instanceof Template) $template = $template->name;
		return !empty($a[$template]) ? $a[$template] : null;
	}

	public function parseTemplateFieldLinks(Field $field){
		if($field->fieldsPerTemplate == "") return false;

		$links = array();
		$lines = explode("\n", trim($field->fieldsPerTemplate));
		$error = false;

		foreach($lines as $key => $line){
			$line = trim($line);
			if(strpos($line, "!") === 0) continue;
			if(strpos($line, "=") === false){
				$lines[$key] = "!".$line;
				$error = true;
				continue;
			}
			list($template, $f) = explode("=", $line, 2);

			$template = (string) trim($template);
			$f = trim($this->sanitizer->fieldName($f));

			$template = $this->templates->get($template);
			$f = $this->fields->get($f);

			if($template instanceof Template && $f instanceof Field && $template->fields->has($f)){
				$links["$template"] = $f;
			}else{
				$lines[$key] = "!".$line;
				$error = true;
			}
		}

		if($error){
			$this->error($this->_("Invalid line found for fieldsPerTemplate."));
			$field->set("fieldsPerTemplate", implode("\n", $lines))->save();
		}

		return $links;
	}

	protected function getValue(Page $page, Field $field){
		if(!$p = $this->getSelectedPage($page, $field)) return null;
		$f = $this->getFieldByTemplate($p->template->name, $field);
		return $p->get("$f");
	}

	/**
	 * The following functions are defined as replacements to keep this fieldtype out of the DB
	 *
	 */

	public function sanitizeValue(Page $page, Field $field, $value) {
		return $value; 
	}

	public function getInputfield(Page $page, Field $field) {
		$inputfield = wire('modules')->get('InputfieldReference');
		$p = $this->getSelectedPage($page, $field);
		if($p) $f = $this->getFieldByTemplate($p->template, $field);
		else $f = null;
		$inputfield->set("referenceField", $f);
		$inputfield->set("referencePage", $p);
		return $inputfield; 
	}

	public function ___wakeupValue(Page $page, Field $field, $value) {
		return $this->getValue($page, $field);
	}

	public function ___sleepValue(Page $page, Field $field, $value) {
		return $this->getValue($page, $field);
	}

	public function getLoadQuery(Field $field, DatabaseQuerySelect $query) {
		// prevent loading from DB
		return $query; 
	}

	public function ___loadPageField(Page $page, Field $field) {
		// generate value at runtime rather than loading from DB
		return $this->getValue($page, $field); 
	}

	public function ___savePageField(Page $page, Field $field) {
		// prevent saving of field
		return true;
	}

	public function ___deletePageField(Page $page, Field $field) {
		// deleting of page field not necessary
		return true; 
	}

	public function ___deleteField(Field $field) {
		// deleting of field not necessary
		return true; 
	}

	public function getDatabaseSchema(Field $field) {
		// no database schema necessary
		return array();
	}

	public function ___createField(Field $field) {
		// nothing necessary to create the field
		return true; 
	}

	public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		// we don't allow this field to be queried
		throw new WireException("Field '{$query->field->name}' is runtime and not queryable");
	}
	
	public function ___getCompatibleFieldtypes(Field $field) {
		// no fieldtypes are compatible
		return new Fieldtypes();
	}

	public function getLoadQueryAutojoin(Field $field, DatabaseQuerySelect $query) {
		// we don't allow this field to be autojoined
		return null;
	}


}

